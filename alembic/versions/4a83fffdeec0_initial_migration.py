"""initial migration

Revision ID: 4a83fffdeec0
Revises: 
Create Date: 2023-04-26 20:29:55.322422

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '4a83fffdeec0'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('allegiance',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('commodity',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('economy',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('faction',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('government',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('landing_pad',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('size', sa.SmallInteger(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('module',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('power',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('power_state',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('reserve_type',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('security',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ship',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('station_type',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('system',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('allegiance_id', sa.Integer(), nullable=True),
    sa.Column('controlling_minor_faction_id', sa.Integer(), nullable=True),
    sa.Column('government_id', sa.Integer(), nullable=True),
    sa.Column('power_id', sa.Integer(), nullable=True),
    sa.Column('power_state_id', sa.Integer(), nullable=True),
    sa.Column('primary_economy_id', sa.Integer(), nullable=True),
    sa.Column('reserve_type_id', sa.Integer(), nullable=True),
    sa.Column('security_id', sa.Integer(), nullable=True),
    sa.Column('x', sa.Double(), nullable=True),
    sa.Column('y', sa.Double(), nullable=True),
    sa.Column('z', sa.Double(), nullable=True),
    sa.Column('ed_system_address', sa.BigInteger(), nullable=True),
    sa.Column('last_updated', sa.DateTime(), nullable=True),
    sa.Column('needs_permit', sa.Boolean(), nullable=True),
    sa.Column('population', sa.BigInteger(), nullable=True),
    sa.ForeignKeyConstraint(['allegiance_id'], ['allegiance.id'], ),
    sa.ForeignKeyConstraint(['controlling_minor_faction_id'], ['faction.id'], ),
    sa.ForeignKeyConstraint(['government_id'], ['government.id'], ),
    sa.ForeignKeyConstraint(['power_id'], ['power.id'], ),
    sa.ForeignKeyConstraint(['power_state_id'], ['power_state.id'], ),
    sa.ForeignKeyConstraint(['primary_economy_id'], ['economy.id'], ),
    sa.ForeignKeyConstraint(['reserve_type_id'], ['reserve_type.id'], ),
    sa.ForeignKeyConstraint(['security_id'], ['security.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('body',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('system_id', sa.Integer(), nullable=True),
    sa.Column('arg_of_periapsis', sa.Double(), nullable=True),
    sa.Column('atmosphere_composition', postgresql.HSTORE(text_type=sa.Text()), nullable=True),
    sa.Column('atmosphere_type', sa.String(), nullable=True),
    sa.Column('axial_tilt', sa.Double(), nullable=True),
    sa.Column('distance_to_arrival', sa.BigInteger(), nullable=True),
    sa.Column('earth_masses', sa.Double(), nullable=True),
    sa.Column('ed_body_address', sa.BigInteger(), nullable=True),
    sa.Column('gravity', sa.Double(), nullable=True),
    sa.Column('is_landable', sa.Boolean(), nullable=True),
    sa.Column('materials', postgresql.HSTORE(text_type=sa.Text()), nullable=True),
    sa.Column('orbital_eccentricity', sa.Double(), nullable=True),
    sa.Column('orbital_inclination', sa.Double(), nullable=True),
    sa.Column('orbital_period', sa.Double(), nullable=True),
    sa.Column('radius', sa.Double(), nullable=True),
    sa.Column('rotational_period', sa.Double(), nullable=True),
    sa.Column('tidally_locked', sa.Boolean(), nullable=True),
    sa.Column('semi_major_axis', sa.Double(), nullable=True),
    sa.Column('solid_composition', postgresql.HSTORE(text_type=sa.Text()), nullable=True),
    sa.Column('sub_type', sa.String(), nullable=True),
    sa.Column('surface_pressure', sa.Double(), nullable=True),
    sa.Column('surface_temperature', sa.Integer(), nullable=True),
    sa.Column('terraforming_state', sa.String(), nullable=True),
    sa.Column('type', sa.String(), nullable=True),
    sa.Column('volcanism_type', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['system_id'], ['system.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('power_state_system_map',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('power_state_id', sa.Integer(), nullable=True),
    sa.Column('system_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['power_state_id'], ['power_state.id'], ),
    sa.ForeignKeyConstraint(['system_id'], ['system.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('power_system_map',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('power_id', sa.Integer(), nullable=True),
    sa.Column('system_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['power_id'], ['power.id'], ),
    sa.ForeignKeyConstraint(['system_id'], ['system.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('reserve_type_system_map',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('reserve_type_id', sa.Integer(), nullable=True),
    sa.Column('system_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['reserve_type_id'], ['reserve_type.id'], ),
    sa.ForeignKeyConstraint(['system_id'], ['system.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('security_system_map',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('security_id', sa.Integer(), nullable=True),
    sa.Column('system_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['security_id'], ['security.id'], ),
    sa.ForeignKeyConstraint(['system_id'], ['system.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('station',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('allegiance_id', sa.Integer(), nullable=True),
    sa.Column('body_id', sa.Integer(), nullable=True),
    sa.Column('faction_id', sa.Integer(), nullable=True),
    sa.Column('government_id', sa.Integer(), nullable=True),
    sa.Column('landing_pad_id', sa.Integer(), nullable=True),
    sa.Column('station_type_id', sa.Integer(), nullable=True),
    sa.Column('distance_to_star', sa.BigInteger(), nullable=True),
    sa.Column('ed_market_id', sa.Integer(), nullable=True),
    sa.Column('services_bm', sa.Integer(), nullable=True),
    sa.Column('is_planetary', sa.Boolean(), nullable=True),
    sa.Column('last_updated', sa.DateTime(), nullable=True),
    sa.Column('market_updated', sa.DateTime(), nullable=True),
    sa.Column('outfitting_updated', sa.DateTime(), nullable=True),
    sa.Column('shipyard_updated', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['allegiance_id'], ['allegiance.id'], ),
    sa.ForeignKeyConstraint(['body_id'], ['body.id'], ),
    sa.ForeignKeyConstraint(['faction_id'], ['faction.id'], ),
    sa.ForeignKeyConstraint(['government_id'], ['government.id'], ),
    sa.ForeignKeyConstraint(['landing_pad_id'], ['landing_pad.id'], ),
    sa.ForeignKeyConstraint(['station_type_id'], ['station_type.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('station_economy_map',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('economy_id', sa.Integer(), nullable=True),
    sa.Column('station_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['economy_id'], ['economy.id'], ),
    sa.ForeignKeyConstraint(['station_id'], ['station.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('station_export_commodities',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('commodity_id', sa.Integer(), nullable=True),
    sa.Column('station_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['commodity_id'], ['commodity.id'], ),
    sa.ForeignKeyConstraint(['station_id'], ['station.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('station_import_commodities',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('commodity_id', sa.Integer(), nullable=True),
    sa.Column('station_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['commodity_id'], ['commodity.id'], ),
    sa.ForeignKeyConstraint(['station_id'], ['station.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('station_module_map',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('module_id', sa.Integer(), nullable=True),
    sa.Column('station_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['module_id'], ['module.id'], ),
    sa.ForeignKeyConstraint(['station_id'], ['station.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('station_prohibited_commodities',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('commodity_id', sa.Integer(), nullable=True),
    sa.Column('station_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['commodity_id'], ['commodity.id'], ),
    sa.ForeignKeyConstraint(['station_id'], ['station.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('station_ship_map',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ship_id', sa.Integer(), nullable=True),
    sa.Column('station_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['ship_id'], ['ship.id'], ),
    sa.ForeignKeyConstraint(['station_id'], ['station.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('station_ship_map')
    op.drop_table('station_prohibited_commodities')
    op.drop_table('station_module_map')
    op.drop_table('station_import_commodities')
    op.drop_table('station_export_commodities')
    op.drop_table('station_economy_map')
    op.drop_table('station')
    op.drop_table('security_system_map')
    op.drop_table('reserve_type_system_map')
    op.drop_table('power_system_map')
    op.drop_table('power_state_system_map')
    op.drop_table('body')
    op.drop_table('system')
    op.drop_table('station_type')
    op.drop_table('ship')
    op.drop_table('security')
    op.drop_table('reserve_type')
    op.drop_table('power_state')
    op.drop_table('power')
    op.drop_table('module')
    op.drop_table('landing_pad')
    op.drop_table('government')
    op.drop_table('faction')
    op.drop_table('economy')
    op.drop_table('commodity')
    op.drop_table('allegiance')
    # ### end Alembic commands ###
