version: "3.8"

name: "edpn"
services:
  zookeeper:
    image: "bitnami/zookeeper:3.8"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - "zookeeper:/bitnami"
    healthcheck:
      test: nc -vz localhost 2181 || exit -1
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 0s

  kafka:
    image: "bitnami/kafka:3.4"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_COMPRESSION_TYPE=gzip
    volumes:
      - "kafka:/bitnami/kafka"
    healthcheck:
      test: kafka-topics.sh --list --bootstrap-server localhost:9092
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      zookeeper:
        condition: service_healthy

  postgres:
    image: "postgres:14.1-alpine"
    restart: always
    env_file:
      - .env
    volumes:
      - "postgres:/var/lib/postgresql/data"
    healthcheck:
      test: pg_isready
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: "mongo:5.0"
    env_file:
      - .env
    volumes:
      - "mongodb:/data/db"
    healthcheck:
      test: echo 'db.stats().ok' | mongo localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 0s

  liquibase:
    build:
      context: ./liquibase
      dockerfile: dockerfile
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy

  message-listener:
    build:
      context: ./message-listener
      dockerfile: dockerfile
    env_file:
      - .env
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      liquibase:
        condition: service_completed_successfully

  commodityv3-processor:
    build:
      context: ./message-processors
      dockerfile: dockerfile-message-processors
      args:
        - APP_DIR=commodityv3-processor
    ports:
      - "8081:8080"
    env_file:
      - .env
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      liquibase:
        condition: service_completed_successfully


  fsssignaldiscoveredv1-processor:
    build:
      context: ./message-processors
      dockerfile: dockerfile-message-processors
      args:
        - APP_DIR=fsssignaldiscoveredv1-processor
    ports:
      - "8082:8080"
    env_file:
      - .env
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      liquibase:
        condition: service_completed_successfully

  navroutev1-processor:
    build:
      context: ./message-processors
      dockerfile: dockerfile-message-processors
      args:
        - APP_DIR=navroutev1-processor
    ports:
      - "8083:8080"
    env_file:
      - .env
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      liquibase:
        condition: service_completed_successfully

  rest:
    build:
      context: ./rest
      dockerfile: dockerfile
    ports:
      - "8080:8080"
    env_file:
      - .env
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      liquibase:
        condition: service_completed_successfully

volumes:
  zookeeper:
    driver: local
  kafka:
    driver: local
  postgres:
    driver: local
  mongodb:
    driver: local
